// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	newrelic "github.com/newrelic/go-agent/v3/newrelic"
	mock "github.com/stretchr/testify/mock"
)

// NewRelic is an autogenerated mock type for the Service type
type NewRelic struct {
	mock.Mock
}

type NewRelic_Expecter struct {
	mock *mock.Mock
}

func (_m *NewRelic) EXPECT() *NewRelic_Expecter {
	return &NewRelic_Expecter{mock: &_m.Mock}
}

// StartDBSegment provides a mock function with given fields: ctx, op, table
func (_m *NewRelic) StartDBSegment(ctx context.Context, op string, table string) *newrelic.DatastoreSegment {
	ret := _m.Called(ctx, op, table)

	if len(ret) == 0 {
		panic("no return value specified for StartDBSegment")
	}

	var r0 *newrelic.DatastoreSegment
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *newrelic.DatastoreSegment); ok {
		r0 = rf(ctx, op, table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*newrelic.DatastoreSegment)
		}
	}

	return r0
}

// NewRelic_StartDBSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartDBSegment'
type NewRelic_StartDBSegment_Call struct {
	*mock.Call
}

// StartDBSegment is a helper method to define mock.On call
//   - ctx context.Context
//   - op string
//   - table string
func (_e *NewRelic_Expecter) StartDBSegment(ctx interface{}, op interface{}, table interface{}) *NewRelic_StartDBSegment_Call {
	return &NewRelic_StartDBSegment_Call{Call: _e.mock.On("StartDBSegment", ctx, op, table)}
}

func (_c *NewRelic_StartDBSegment_Call) Run(run func(ctx context.Context, op string, table string)) *NewRelic_StartDBSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *NewRelic_StartDBSegment_Call) Return(_a0 *newrelic.DatastoreSegment) *NewRelic_StartDBSegment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NewRelic_StartDBSegment_Call) RunAndReturn(run func(context.Context, string, string) *newrelic.DatastoreSegment) *NewRelic_StartDBSegment_Call {
	_c.Call.Return(run)
	return _c
}

// StartGenericSegment provides a mock function with given fields: _a0, _a1
func (_m *NewRelic) StartGenericSegment(_a0 context.Context, _a1 string) func() {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for StartGenericSegment")
	}

	var r0 func()
	if rf, ok := ret.Get(0).(func(context.Context, string) func()); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func())
		}
	}

	return r0
}

// NewRelic_StartGenericSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartGenericSegment'
type NewRelic_StartGenericSegment_Call struct {
	*mock.Call
}

// StartGenericSegment is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *NewRelic_Expecter) StartGenericSegment(_a0 interface{}, _a1 interface{}) *NewRelic_StartGenericSegment_Call {
	return &NewRelic_StartGenericSegment_Call{Call: _e.mock.On("StartGenericSegment", _a0, _a1)}
}

func (_c *NewRelic_StartGenericSegment_Call) Run(run func(_a0 context.Context, _a1 string)) *NewRelic_StartGenericSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NewRelic_StartGenericSegment_Call) Return(_a0 func()) *NewRelic_StartGenericSegment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NewRelic_StartGenericSegment_Call) RunAndReturn(run func(context.Context, string) func()) *NewRelic_StartGenericSegment_Call {
	_c.Call.Return(run)
	return _c
}

// NewNewRelic creates a new instance of NewRelic. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNewRelic(t interface {
	mock.TestingT
	Cleanup(func())
}) *NewRelic {
	mock := &NewRelic{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
