"use strict";(self.webpackChunkstencil=self.webpackChunkstencil||[]).push([[291],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,h=m["".concat(l,".").concat(d)]||m[d]||p[d]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5309:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={},l="Glossary",c={unversionedId:"glossary",id:"glossary",title:"Glossary",description:"This section describes the core elements of a schema registry.",source:"@site/docs/glossary.md",sourceDirName:".",slug:"/glossary",permalink:"/stencil/docs/glossary",editUrl:"https://github.com/goto/stencil/edit/master/docs/docs/glossary.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Installation",permalink:"/stencil/docs/installation"},next:{title:"Introduction",permalink:"/stencil/docs/guides/introduction"}},u={},p=[{value:"Namespace",id:"namespace",level:2},{value:"Schema",id:"schema",level:2},{value:"Version",id:"version",level:2},{value:"Compatibility",id:"compatibility",level:2},{value:"Backward",id:"backward",level:3},{value:"Forward",id:"forward",level:3},{value:"Full",id:"full",level:3}],m={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"glossary"},"Glossary"),(0,i.kt)("p",null,"This section describes the core elements of a schema registry."),(0,i.kt)("h2",{id:"namespace"},"Namespace"),(0,i.kt)("p",null,"A named collection of schemas. Each namespace holds a logically related set of schemas, typically managed by a single entity, belonging to a particular application and/or having a shared access control management scope. Since a schema registry is often a resource with a scope greater than a single application and might even span multiple organizations, it is very useful to put a grouping construct around sets of schemas that are related either by ownership or by a shared subject matter context. A namespace has following attributes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"ID:")," Identifies the schema group."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Format:")," Defines the schema format managed by this namespace. e..g Avro, Protobuf, JSON"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Compatibility")," Schema compatibility constraint type. e.g. Backward, Forward, Full")),(0,i.kt)("h2",{id:"schema"},"Schema"),(0,i.kt)("p",null,"A document describing the structure, names, and types of some structured data payload. Conceptually, a schema is a description of a data structure. Since data structures evolve over time, the schema describing them will also evolve over time. Therefore, a schema often has multiple versions."),(0,i.kt)("h2",{id:"version"},"Version"),(0,i.kt)("p",null,"A specific version of a schema document. Even though not prescribed in this specification, an implementation might choose to impose compatibility constraints on versions following the initial version of a schema."),(0,i.kt)("h2",{id:"compatibility"},"Compatibility"),(0,i.kt)("p",null,"A key Schema Registry feature is the ability to version schemas as they evolve. Compatibility policies are created at the namespace or schema level, and define evolution rules for each schema."),(0,i.kt)("p",null,"After a compatibility policy has been defined for a schema, any subsequent version updates must honor the schema\u2019s original compatibility, to allow for consistent schema evolution."),(0,i.kt)("p",null,"Compatibility of schemas can be configured with any of the below values:"),(0,i.kt)("h3",{id:"backward"},"Backward"),(0,i.kt)("p",null,"Indicates that new version of a schema would be compatible with earlier version of that schema."),(0,i.kt)("h3",{id:"forward"},"Forward"),(0,i.kt)("p",null,"Indicates that an existing schema is compatible with subsequent versions of the schema."),(0,i.kt)("h3",{id:"full"},"Full"),(0,i.kt)("p",null,"Indicates that a new version of the schema provides both backward and forward compatibilities."))}d.isMDXComponent=!0}}]);