"use strict";(self.webpackChunkstencil=self.webpackChunkstencil||[]).push([[58],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return g}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),g=i,m=d["".concat(s,".").concat(g)]||d[g]||u[g]||r;return n?a.createElement(m,l(l({ref:t},p),{},{components:n})):a.createElement(m,l({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7140:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return u}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),l=["components"],o={},s="Java",c={unversionedId:"clients/java",id:"clients/java",title:"Java",description:"Stencil is dynamic schema registry for protobuf. Protobuf is a great efficient and fast mechanism for serializing structured data. The challenge with protobuf is that for every change it requires to recompile the package to generate the necessary classes. This is not a big challenge if you have protobuf enclosed in your application and compile at startup. But if you have thousands of protos stored in central registry and 100s of applications use them. Updating depndencies of compiled proto jar can soon become a nightmare.",source:"@site/docs/clients/java.md",sourceDirName:"clients",slug:"/clients/java",permalink:"/stencil/docs/clients/java",editUrl:"https://github.com/goto/stencil/edit/master/docs/docs/clients/java.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Go",permalink:"/stencil/docs/clients/go"},next:{title:"Clojure",permalink:"/stencil/docs/clients/clojure"}},p={},u=[{value:"Requirements",id:"requirements",level:2},{value:"Usage",id:"usage",level:2},{value:"Add stencil as dependency",id:"add-stencil-as-dependency",level:3},{value:"Gradle",id:"gradle",level:4},{value:"Maven",id:"maven",level:4},{value:"Creating a stencil Client instance",id:"creating-a-stencil-client-instance",level:3},{value:"Loading Descriptor from Protobuf Class available in the classpath",id:"loading-descriptor-from-protobuf-class-available-in-the-classpath",level:4},{value:"Create client with remote URL",id:"create-client-with-remote-url",level:4},{value:"Creating MultiURL client",id:"creating-multiurl-client",level:4},{value:"With StatsD client for monitoring",id:"with-statsd-client-for-monitoring",level:4},{value:"With Schema Update Listener",id:"with-schema-update-listener",level:4},{value:"With version based refresh strategy",id:"with-version-based-refresh-strategy",level:4},{value:"Passing custom headers",id:"passing-custom-headers",level:4},{value:"Getting descriptor",id:"getting-descriptor",level:3},{value:"Parsing message",id:"parsing-message",level:3},{value:"Using Parser interface",id:"using-parser-interface",level:4},{value:"Publishing",id:"publishing",level:3},{value:"Notes",id:"notes",level:3}],d={toc:u};function g(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"java"},"Java"),(0,r.kt)("p",null,"Stencil is dynamic schema registry for protobuf. Protobuf is a great efficient and fast mechanism for serializing structured data. The challenge with protobuf is that for every change it requires to recompile the package to generate the necessary classes. This is not a big challenge if you have protobuf enclosed in your application and compile at startup. But if you have thousands of protos stored in central registry and 100s of applications use them. Updating depndencies of compiled proto jar can soon become a nightmare."),(0,r.kt)("p",null,"Protobuf allows you to define a protobuf file using DescriptorSet. A FileDescriptorSet is basically a description of the proto file i.e. it\u2019s name, it\u2019s package name, it\u2019s dependencies and the messages it contains. Once you have the descriptor file, you can simply read it in any language to create a FileDescriptor Object. Now any serialized ProtoMessage can be deserialized using DynamicMessage and ProtoMessage descriptor."),(0,r.kt)("h2",{id:"requirements"},"Requirements"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gradle.org/"},"Gradle v6+")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://openjdk.java.net/projects/jdk8/"},"JDK 8+"))),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"add-stencil-as-dependency"},"Add stencil as dependency"),(0,r.kt)("h4",{id:"gradle"},"Gradle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},"  implementation group: 'com.gotocompany', name: 'stencil', version: '0.7.0'\n")),(0,r.kt)("h4",{id:"maven"},"Maven"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n  <groupId>com.gotocompany</groupId>\n  <artifactId>stencil</artifactId>\n  <version>0.7.0</version>\n</dependency>\n")),(0,r.kt)("h3",{id:"creating-a-stencil-client-instance"},"Creating a stencil Client instance"),(0,r.kt)("p",null,"Stencil client can be created in different modes."),(0,r.kt)("h4",{id:"loading-descriptor-from-protobuf-class-available-in-the-classpath"},"Loading Descriptor from Protobuf Class available in the classpath"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import com.gotocompany.stencil.client.StencilClient;\nimport com.gotocompany.stencil.StencilClientFactory;\n\nStencilClient stencilClient = StencilClientFactory.getClient();\n")),(0,r.kt)("h4",{id:"create-client-with-remote-url"},"Create client with remote URL"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.gotocompany.stencil.config.StencilConfig;\n\nString url = "http://url/to/proto/descriptor-set/file";\nStencilClient stencilClient = StencilClientFacorty.getClient(url, StencilConfig.builder().build());\n')),(0,r.kt)("h4",{id:"creating-multiurl-client"},"Creating MultiURL client"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.gotocompany.stencil.config.StencilConfig;\n\nArrayList<String> urls = new ArrayList<String>();\nurls.add("http://localhost:8082/v1beta1/...");\nStencilClient stencilClient = StencilClientFacorty.getClient(urls, StencilConfig.builder().build());\n')),(0,r.kt)("h4",{id:"with-statsd-client-for-monitoring"},"With StatsD client for monitoring"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// From https://github.com/tim-group/java-statsd-client\nimport com.timgroup.statsd.StatsDClient;\nimport com.timgroup.statsd.NonBlockingStatsDClient;\n\nStatsDClient statDClient = new NonBlockingStatsDClient("my.prefix", "statsd-host", 8125);\nStencilClient stencilClient = StencilClientFactory.getClient(url, StencilConfig.builder().statsDClient(statsDClient).build());\n')),(0,r.kt)("h4",{id:"with-schema-update-listener"},"With Schema Update Listener"),(0,r.kt)("p",null,"Whenever schema has changed this listener will be called."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import com.gotocompany.stencil.SchemaUpdateListener;\n\nSchemaUpdateListener updateListener = new SchemaUpdateListenerImpl();\nStencilClient stencilClient = StencilClientFactory.getClient(url, StencilConfig.builder().updateListener(updateListener).build());\n")),(0,r.kt)("h4",{id:"with-version-based-refresh-strategy"},"With version based refresh strategy"),(0,r.kt)("p",null,"If url belongs to stencil server, client can choose to refresh schema data only if there is a new version available."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import com.gotocompany.stencil.cache.SchemaRefreshStrategy;\n\nStencilConfig config = StencilConfig.builder().refreshStrategy(SchemaRefreshStrategy.versionBasedRefresh()).build();\nStencilClient stencilClient = StencilClientFactory.getClient(url, config);\n")),(0,r.kt)("h4",{id:"passing-custom-headers"},"Passing custom headers"),(0,r.kt)("p",null,"While sending request to specified URL, client can be configured to pass headers as well."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import org.apache.http.Header;\nimport org.apache.http.HttpHeaders;\nimport org.apache.http.message.BasicHeader;\n\nHeader authHeader = new BasicHeader(HttpHeaders.AUTHORIZATION, "Bearer " + token);\nList<Header> headers = new ArrayList<Header>();\nheaders.add(authHeader);\nStencilConfig config = StencilConfig.builder().fetchHeaders(headers).build();\nStencilClient stencilClient = StencilClientFactory.getClient(url, config);\n')),(0,r.kt)("h3",{id:"getting-descriptor"},"Getting descriptor"),(0,r.kt)("p",null,"Given the name of the Proto-Class StencilClient returns the Descriptor for it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import com.google.protobuf.Descriptors;\nimport com.google.protobuf.DynamicMessage;\n\nDescriptors.Descriptor descriptor = stencilClient.get(protoClassName);\n")),(0,r.kt)("h3",{id:"parsing-message"},"Parsing message"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import com.google.protobuf.Descriptors;\nimport com.google.protobuf.DynamicMessage;\n\nDescriptors.Descriptor descriptor = stencilClient.get(protoClassName);\nDynamicMessage message = DynamicMessage.parseFrom(descriptor, bytes);\n")),(0,r.kt)("h4",{id:"using-parser-interface"},"Using Parser interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.gotocompany.stencil.Parser;\nimport com.google.protobuf.DynamicMessage;\n\nParser protoParser = stencilClient.getParser("com.example.proto.schema");\nDynamicMessage message = protoParser.parse(bytes)\n')),(0,r.kt)("h3",{id:"publishing"},"Publishing"),(0,r.kt)("p",null,"The client is published and released via github workflow and uses github tag for versioning."),(0,r.kt)("h3",{id:"notes"},"Notes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Stencil uses ",(0,r.kt)("inlineCode",{parentName:"li"},"java-statsd-client")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"com.timgroup"),", Please use the same client in your application for statsd")))}g.isMDXComponent=!0}}]);